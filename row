
ip address translate in binar format for statistic analys

http://koldunov.net/?p=381 - scipy

Если надо выбрать только неповторяющиеся значения поля [Field] таблицы [Table], то
SELECT [Field] FROM [Table] GROUP BY [Field] HAVING COUNT(*)=1

-- только уникальные записи
SELECT DISTINCT t.num FROM tblname t;


pattern_request = 'HTTP/....$'
request = ln[11:15]
if  re.search(pattern_request, ' '.join(ln[11:15])) is None:
			pass
else: request = ln[11:14]
elif re.search(pattern_request, ' '.join(ln[11:14])) is None:
			pass
else: request = ln[11:13]
elif re.search(pattern_request, ' '.join(ln[11:13])) is None:
			pass
else: request = ln[11:12]
elif re.search(pattern_request, ' '.join(ln[11:12])) is None:
			pass
else request = ln[11]


# soft ping
ping -I 186.2.164.38 94.75.227.164

# hard ping
ping -I 192.168.122.1 -ADb -c 10 -p ff -s 1452 -t 128 190.115.19.42

# telnet to 80 port
telnet -b 186.2.163.197 185.148.37.49 80

# telnet to 443 port
telnet -b 186.2.163.197 185.148.37.49 443

# openssl connect to 443 port
echo |openssl s_client -connect 186.2.161.78:443 -status
openssl s_client -connect styduck.com:443 -servername styduck.com

# sotf traceroute
mtr -a 186.2.163.197 -tber 185.148.37.49

# hard traceroute TCP
mtr -a 192.168.122.1 -TP 80 -tber -B 255 190.115.19.42

# hard traceroute UDP
mtr -a 192.168.122.1 -UP 53 -tber -B 255 190.115.19.42

# TCPtraceroute to 80 port
tcptraceroute -NFE -m 72 -l 1400 --dnat ya.ru 80

# TCPtraceroute to 443 port
tcptraceroute -NFE -m 72 -l 1400 --dnat ya.ru 443

# GET request
import httplib
conn = httplib.HTTPConnection("unrix.com")
conn.request("GET","/")
res = conn.getresponse()
print res.status, res.reason
conn.close()

# POST request
import httplib
conn = httplib.HTTPConnection("unrix.com")
conn.request("POST","/")
res = conn.getresponse()
print res.status, res.reason
conn.close()



### Ruslan check

#!/usr/bin/python
import os, sys, socket, time, threading, Queue, ssl #? ssl socket

servers = ["10.0.6.130", "10.0.9.3", "10.0.9.2", "10.0.8.1", "10.0.2.3", "10.0.2.70", "10.0.4.98"]
saddr = ''                          # all
user = 'ruslan'                     # user binded for ssh session
if len(sys.argv) > 1:               # def port 4444 or custom
    sport = int(sys.argv[1])
else:
    sport = 4444


log = open('./fwapi.log','a',0)     # log open and define
def tolog(m):
    log.write ( time.strftime("%H:%M:%S %d-%m-%Y") + "\t" + m + "\n" )

class tclass:
    def __init__(self):             #  Multi thread class
        self.lst = None             # do -> start check/del threads -> resp to queue
        self.queue = Queue.Queue()  # return list or errno

    def do(self,type):
        resp = ""
        res = 0
        tlist = []
        for h in servers:
            t = threading.Thread(target=self.thrd, args=(type,h))
            tlist.append(t)
        for thread in tlist:
            thread.start()
        for thread in tlist:
            thread.join()
        if (type == 0) or (type == 1) :
            if not self.queue.empty():
                while not self.queue.empty():
                    resp = resp + self.queue.get()
            if not resp :
                return -1
            else:
                return resp
        elif type == 2 :
            if not self.queue.empty():
                while not self.queue.empty():
                    res = res + int(self.queue.get())
            if (res == 0):
                return -1
            else:
                return 0

    def thrd(self, c, host):
        if c == 0 :
            r = os.popen("ssh -l " + user + " " + host + " \'sudo ipset save | grep -wP \"" + "|".join(self.lst) + "\" | cut -d\" \" -f2-\'" ).read()
        elif c == 1 :
            r = os.popen("ssh -l " + user + " " + host + " \'sudo ipset save | grep -wP \"" + "|".join(self.lst) + "\" | grep \"BAN\" | cut -d\" \" -f2-\'" ).read()
        elif c == 2 :
            r = os.popen("ssh -l " + user + " " + host + " \'if sudo ipset save | grep -wP \"" + "|".join(self.lst) + "\"| grep \"BAN\" | cut -d\" \" -f1,2,3 | perl -lape \"s/add/ipset del/g\" > ./tmp.sh && chmod +x ./tmp.sh && test -s tmp.sh ; then sudo ./tmp.sh && echo 1 ; else echo 0; fi && rm ./tmp.sh\'").read()
        self.queue.put(r)
        self.queue.task_done()

def main():                       #  Working with socket loop
    tolog("Start")                # accept -> check args -> call mthread from class
    sock = socket.socket()        # return resp to socket,log -> close
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((saddr,sport))
    sock.listen(10)

    while True:
        nsock, caddr = sock.accept()
        data = nsock.recv(1024)
        data = data.split(' ')
        req_method = data.pop(0)  # req_method: method , data:req_ips
        ips = []
        ippass = True
        for i in data:
            i = i.rstrip('\n')
            ips.append(i)
            try: socket.inet_aton(i.rstrip('\n'))
            except socket.error:
                ippass = False
                break
        if not ippass :
            tolog("Invalid IP \"" + i + "\" from " + str(caddr[0]))
            nsock.send("ERROR: Invalid IP\n")
            nsock.close()
            continue

        thread = tclass()
        thread.lst = ips

        if req_method == "checkall":
            bips = thread.do(0)
            if bips == -1 :
                nsock.send("Not in list")
            else:
                nsock.send(bips)

        elif req_method == "check":
            bips = thread.do(1)
            if bips == -1 :
                nsock.send("Not banned")
            else:
                nsock.send(bips)

        elif req_method == "del":
            bips = thread.do(2)
            if bips == -1 :
                nsock.send("Nothing to unban")
            else:
                nsock.send("Unbanned")
                tolog("Unban \"" + "|".join(ips) + "\" from " + str(caddr[0]))

        else:
            tolog("Invalid method \"" + req_method + "\" from " + str(caddr[0]))
            nsock.send("ERROR: Invalid method\n")

        del thread, ips
        nsock.close()

main()



### узнать тип ОС
os.uname()[3]

### точнее вариант - работает в centos, debian, ubuntu
import platform
platform.linux_distribution()[0]

if 'Ubuntu' in platform.linux_distribution()[0]:
     if [0] == [os.system('dpkg --get-selections | grep docker')]:
         print 'ok'
     else: 
		 print 'Need is install'
		 os.system('sudo apt-get update')
		 os.system('sudo apt-key adv --keyserver \
		 hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D')
		 os.system('sudo apt-add-repository \
		 "deb https://apt.dockerproject.org/repo ubuntu-xenial main"')
		 os.system('sudo apt-get update')
		 os.system('apt-cache policy docker-engine')
		 os.system('sudo apt-get install docker-engine -y')
		 os.system('sudo systemctl enable docker')
		 os.system('sudo systemctl status docker')
		 
		 
if 'Debian' in platform.linux_distribution()[0]:
     if [0] == [os.system('dpkg --get-selections | grep docker')]:
         print 'ok'
     else: 
		 print 'Need is install'
		 os.system('sudo apt-get install -y apt-transport-https \
		 ca-certificates curl \
		 python-software-properties')
		 os.system('curl -fsSL \
		 https://download.docker.com/linux/debian/gpg |sudo apt-key add -')
		 os.system('sudo add-apt-repository \
		 "deb [arch=amd64] https://download.docker.com/linux/debian \
		 $(lsb_release -cs) stable"')
		 os.system('sudo apt-get update')
		 os.system('sudo apt-get install docker-ce')
		 os.system('sudo systemctl start docker')
		 os.system('sudo systemctl enable docker')
		 
if 'CentOS' in platform.linux_distribution()[0]:
     if [0] == [os.system('rpm -qa | grep docker')]:
         print 'ok'
     else: 
		 print 'Need is install'
		 os.system('sudo yum install yum-utils -y')
		 os.system('sudo yum-config-manager \
		 --add-repo \
		 https://download.docker.com/linux/centos/docker-ce.repo')
		 os.system('sudo yum makecache fast')
		 os.system('sudo yum -y install docker-ce')
		 os.system('sudo systemctl start docker')
		 os.system('sudo systemctl enable docker')
		 os.system('sudo systemctl status docker')
		 

docker pull sameersbn/postgresql:9.6-2

# Download file

def geturl(url):
    try: 
        resource = urllib.request.urlopen(url )
        doc = resource.read()
        print('Загружено')
        return doc
    except urllib.error.HTTPError:
        print('Ошибка соединения')
        return 
    except urllib.error.URLError:
        print('Неверный адрес')
        return 
    
doc = geturl('https://yadi.sk/d/kpiCWZ_as2Ksv')
with open('aipi.txt','wb') as file:
    file.write(doc)
    
    
#Use our custom data directory (/data/main) & .hba file:

sed -i '/^data_directory*/ s|/var/lib/postgresql/9.3/main|/data/main|' /data/postgresql.conf
sed -i '/^hba_file*/ s|/etc/postgresql/9.3/main/pg_hba.conf|/data/pg_hba.conf|' /data/postgresql.conf

### download file
1 - http://python-lab.blogspot.ru/2012/06/python-101.html
2 - http://www.cyberforum.ru/python-web/thread1746144.html
3 - http://www.pvsm.ru/pesochnitsa/86767
4 - https://hub.docker.com/r/sameersbn/postgresql/
5 - https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04
6 - https://www.mvoronin.pro/ru/blog/post-118
7 - http://amattn.com/p/tutorial_postgresql_usage_examples_with_docker.html
8 - https://store.docker.com/editions/community/docker-ce-server-centos?tab=description
9 - https://www.liquidweb.com/kb/how-to-install-docker-on-centos-7/
